{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "prev_pub_hash": "079bf8854a4255688941af2bd371b587b1f25737b4330b6346f5799c6c867e75"
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p style=\"text-align:center\">\n    <a href=\"https://skills.network\" target=\"_blank\">\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"380\" alt=\"Skills Network Logo\">\n    </a>\n</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "# **Exploratory Data Analysis Lab**\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Estimated time needed: **30** minutes\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "In this module you get to work with the cleaned dataset from the previous module.\n\nIn this assignment you will perform the task of exploratory data analysis.\nYou will find out the distribution of data, presence of outliers and also determine the correlation between different columns in the dataset.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## Objectives\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "In this lab you will perform the following:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "-   Identify the distribution of data in the dataset.\n\n-   Identify outliers in the dataset.\n\n-   Remove outliers from the dataset.\n\n-   Identify correlation between features in the dataset.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "* * *\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## Hands on Lab\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Import the pandas module.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-1-7dd3504c366f>:1: DeprecationWarning: \nPyarrow will become a required dependency of pandas in the next major release of pandas (pandas 3.0),\n(to allow more performant data types, such as the Arrow string type, and better interoperability with other libraries)\nbut was not found to be installed on your system.\nIf this would cause problems for you,\nplease provide us feedback at https://github.com/pandas-dev/pandas/issues/54466\n        \n  import pandas as pd\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 1
    },
    {
      "cell_type": "markdown",
      "source": "Load the dataset into a dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Read Data</h2>\n<p>\nWe utilize the <code>pandas.read_csv()</code> function for reading CSV files. However, in this version of the lab, which operates on JupyterLite, the dataset needs to be downloaded to the interface using the provided code below.\n</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "The functions below will download the dataset into your browser:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 2
    },
    {
      "cell_type": "code",
      "source": "file_path = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv\"",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 3
    },
    {
      "cell_type": "markdown",
      "source": "To obtain the dataset, utilize the download() function as defined above:  \n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "await download(file_path, \"m2_survey_data.csv\")\nfile_name=\"m2_survey_data.csv\"",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 4
    },
    {
      "cell_type": "markdown",
      "source": "Utilize the Pandas method read_csv() to load the data into a dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df = pd.read_csv(file_name)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 5
    },
    {
      "cell_type": "markdown",
      "source": "> Note: This version of the lab is working on JupyterLite, which requires the dataset to be downloaded to the interface.While working on the downloaded version of this notebook on their local machines(Jupyter Anaconda), the learners can simply **skip the steps above,** and simply use the URL directly in the `pandas.read_csv()` function. You can uncomment and run the statements in the cell below.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#df = pd.read_csv(\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv\")",
      "metadata": {},
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": "## Distribution\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Determine how the data is distributed\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "The column `ConvertedComp` contains Salary converted to annual USD salaries using the exchange rate on 2019-02-01.\n\nThis assumes 12 working months and 50 working weeks.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Plot the distribution curve for the column `ConvertedComp`.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "%pip install seaborn",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 6
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.distplot(df['ConvertedComp'],hist=False)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-7-09bd7faa889d>:4: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(df['ConvertedComp'],hist=False)\n",
          "output_type": "stream"
        },
        {
          "execution_count": 7,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='ConvertedComp', ylabel='Density'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 7
    },
    {
      "cell_type": "markdown",
      "source": "Plot the histogram for the column `ConvertedComp`.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nsns.distplot(df['ConvertedComp'],hist=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-8-64765228dcbe>:2: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(df['ConvertedComp'],hist=True)\n",
          "output_type": "stream"
        },
        {
          "execution_count": 8,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='ConvertedComp', ylabel='Density'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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eKG++c1vRqy47sTXEpC/dVXadHdXu348kqTyarp+AACJoWufiJLy8/OVn5/fbtv48eNPuqDuqq61NcWd5JQ7qUsNXW3GqNCiAgBIDF0KKnV1dfr1r3+tpUuXqry8XIFAoN3+7du3R6S47iTU7ZPudnX5MUJBha4fAECi6FJQueGGG/Tee+/p6quvVkFBQXhpfXRdqEUlw9PlRi66fgAACadLn4qvv/66XnvtNU2cODHS9XRbdT6/JCn9pIJKsEWlvKZRgYCR00mABADEty4NhujZs6eys7MjXUu3Vtt08i0qvTM9cjikZr9RRX1TpEoDAMAyXQoq9913n+6666521/vByQmPUTmJoJLscionPdj9w1oqAIBE0KVPxYcffljbtm1TXl6e+vfvr+Tk9guUrV69OiLFdSd1EQgqUnCcyoFan8qrfRpWGInKAACwTpc+FadNmxbhMnB4MG3XZ/1IwXEq/95TTYsKACAhdCmo3H333ZGuo9sLD6bt4mJvIaGZP/uY+QMASABdW1lMUmVlpf74xz9q9uzZqqiokBTs8tm9e3fEiutOItf107roGy0qAIAE0KVPxU8//VSTJ09WVlaWdu7cqRtvvFHZ2dl6+eWXVVJSooULF0a6zoQWCBjVRWDWj9RmijJBBQCQALrUojJr1ixde+212rJli1JSUsLbv/71r2v58uURK667qGpoVutlfpR20mNUWrt+WJ0WAJAAuhRUPvnkE910001HbO/Tp4/KyspOuqju5mBdcM2TlGSnkpxd7o2T1OYKyoxRAQAkgC59Kno8HlVXVx+xffPmzerdu/dJF9XdHKwNhoqT7faRDnf9HKj1qdkfOM7RAADYW5eCypQpU/TLX/5Szc3NkiSHw6GSkhLdfvvt+o//+I+IFtgdhFpUTnYgrSTlpLuV5HTImGBYAQAgnnUpqDz88MOqra1V79691dDQoK9+9asaMGCAMjMzdf/990e6xoQXalE52anJkuR0OpSbyRRlAEBi6NInY1ZWlpYsWaIPPvhA69atU21trc4880xNnjw50vV1C6EWlUh0/UhSrjdFe6oaWfQNABD3Ov3JGAgEtGDBAr388svauXOnHA6HiouLlZ+fL2OMHA6u2NtZB2sj1/UjHZ75wxRlAEC861TXjzFGU6ZM0Q033KDdu3drxIgRGjZsmHbt2qVrr71W3/zmN6NV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u2bUqFHG7XabU0891cyfPz+2BSewzrwWDz74oDnttNNMSkqKyc7ONpMmTTLvvPOOBVUnntAU1y9/zZgxwxjD+yKWOvta8L6Ijo5eA0ntfs+74/uCqycDAADbYowKAACwLYIKAACwLYIKAACwLYIKAACwLYIKAACwLYIKAACwLYIKAACwLYIKAACwLYIKgISxbNkyORwOVVZWWl0KENeWL1+uyy+/XIWFhXI4HFq8eHGnH8MYo4ceekgDBw6Ux+NRnz59dP/993f6cQgqQAIoKyvTj370I5166qnyeDwqKirS5ZdffsTFyuwo2uHCGKOnn35aEyZMUEZGhnr06KGxY8dq7ty5qq+vj8o5gXhXV1enkSNH6oknnujyY9xyyy364x//qIceekgbN27U3//+d40fP77Tj5PU5QoA2MLOnTs1ceJE9ejRQ7/5zW80YsQINTc3680339TMmTO1ceNGq0s8qubm5qif4+qrr9bLL7+s//mf/9Hvfvc79e7dW+vWrdPcuXPVv39/TZs2Leo1APHm0ksv1aWXXnrU/T6fT3feeacWLVqkyspKDR8+XA8++KAmTZokSfr88881b948rV+/XoMGDZKkE7oadIesvdQQgJN16aWXmj59+pja2toj9h06dMgYY8yuXbvMlClTTHp6usnMzDRXXHFF+IrRxhhz9913m5EjR5qFCxeafv36Ga/Xa6688kpTXV1tjDHmqaeeMgUFBcbv97d7/ClTppjrrrsufHvx4sVm9OjRxuPxmOLiYnPPPfeY5ubm8H5J5ve//725/PLLTVpampkxY8ZRL4Tn9/vNAw88YPr3729SUlLMGWecYV588cV253/ttdfM6aefblJSUsykSZPM/PnzjaTw837hhReMJLN48eIjfjaBQMBUVlaGz3XvvfeaPn36GLfbbUaOHGlef/318LE7duwwkswLL7xgzj33XJOSkmLGjh1rNm3aZFasWGHGjBlj0tPTzSWXXGLKy8vD95sxY4aZOnWqueeee0yvXr1MZmamuemmm4zP5zvq6wnYjSTzyiuvtNt2ww03mHPOOccsX77cbN261fzmN78xHo/HbN682RgTvHDlwIEDzUMPPWT69+9v+vXrZ77//e+bgwcPdv78kXgSAKxx8OBB43A4zAMPPHDUY/x+vxk1apQ599xzzcqVK81HH31kxowZ0+4KrHfffbfJyMgw06dPN5999plZvny5yc/PNz//+c+NMcZUVFQYt9tt3n777Xbnbrtt+fLlxuv1mgULFpht27aZt956y/Tv39/cc8894ftIMrm5ueZPf/qT2bZtm9m5c6d56aWXjCSzadMms3fv3nB4+NWvfmUGDx5s3njjDbNt2zYzf/584/F4zLJly4wxxpSUlBiPx2NmzZplNm7caP7yl7+YvLy8dkFlypQpZtCgQcf9OT7yyCPG6/WaRYsWmY0bN5qf/exnJjk5Ofw/3VBQCdWzYcMGc9ZZZ5kxY8aYSZMmmffff9+sXr3aDBgwwPz3f/93+HFnzJhhMjIyzJVXXmnWr19vXn31VdO7d+/wzxWIB18OKrt27TIul8vs3r273XEXXnihmT17tjHGmJtuusl4PB4zYcIEs3z58vAVns8///zOn/+kqgdgqY8//thIMi+//PJRj3nrrbeMy+UyJSUl4W3//ve/jSSzYsUKY0wwqKSlpYVbUIwx5qc//amZMGFC+PbUqVPN9ddfH7791FNPmcLCwnAry4UXXnhEYPrzn/9sCgoKwrclmVtvvbXdMe+++267cGGMMY2NjSYtLc18+OGH7Y79/ve/b77zne8YY4yZPXu2GTp0aLv9t99+e7vHGjJkiJkyZcpRfzYhhYWF5v7772+3bdy4ceaHP/yhMeZwUPnjH/8Y3r9o0SIjySxdujS8bc6cOe2C0YwZM0x2drapq6sLb5s3b57JyMg4onUKsKsvB5VXX33VSDLp6entvpKSksy3vvUtY4wxN954Y/gPkJBVq1YZSWbjxo2dOj9jVIA4Fvx/yLF9/vnnKioqUlFRUXjb0KFD1aNHD33++ecaN26cJKl///7KzMwMH1NQUKDy8vLw7auuuko33nijfv/738vj8ejZZ5/Vt7/9bTmdwTH569at0wcffNBuVL/f71djY6Pq6+uVlpYmSRo7duxxa966davq6+t10UUXtdve1NSk0aNHh5/XhAkT2u0/++yz290+kZ9PdXW19uzZo4kTJ7bbPnHiRK1bt67dtjPOOCP8fV5eniRpxIgR7ba1/ZlJ0siRI8PPPVRjbW2tSktL1a9fv+PWB9hNbW2tXC6XVq1aJZfL1W5fRkaGpOD/P5KSkjRw4MDwviFDhkiSSkpKwuNWTgRBBYhjp59+uhwOR0QGzCYnJ7e77XA4FAgEwrcvv/xyGWP02muvady4cfrnP/+pRx99NLy/trZW9957r6ZPn37EY6ekpIS/T09PP24ttbW1kqTXXntNffr0abfP4/Gc2BOSNHDgwIgOJm77M3I4HB1ua/szAxLR6NGj5ff7VV5ervPOO6/DYyZOnKiWlhZt27ZNp512miRp8+bNktTpgM70ZCCOZWdn6+KLL9YTTzyhurq6I/ZXVlZqyJAhKi0tVWlpaXj7hg0bVFlZqaFDh57wuVJSUjR9+nQ9++yzWrRokQYNGqQzzzwzvP/MM8/Upk2bNGDAgCO+Qq0uHXG73ZKCrS8hQ4cOlcfjUUlJyRGPFWoZGjJkiFasWNHusT766KN2t7/73e9q8+bN+tvf/nbEeY0xqqqqktfrVWFhoT744IN2+z/44INO/XyOZt26dWpoaGhXY0ZGRrsWLsBuamtrtXbtWq1du1aStGPHDq1du1YlJSUaOHCgrrrqKl1zzTV6+eWXtWPHDq1YsUJz5szRa6+9JkmaPHmyzjzzTF1//fVas2aNVq1apZtuukkXXXRRu1aWE3LSnVcALLVt2zaTn59vhg4dav7617+azZs3mw0bNpjHHnvMDB482AQCATNq1Chz3nnnmVWrVpmPP/64w8G0I0eObPe4jz76qOnXr1+7bUuWLDEej8cMGjTI3Hfffe32vfHGGyYpKcncc889Zv369WbDhg1m0aJF5s477wwfow5mD3zxxRfG4XCYBQsWmPLyclNTU2OMMebOO+80OTk5ZsGCBWbr1q1m1apV5re//a1ZsGCBMSY4oM/tdpvbbrvNbNy40Tz77LMmPz+/3RiVQCBgrrzySpOammruv/9+88knn5idO3eaf/zjH+aCCy4I1/Loo48ar9drnn/+ebNx40Zz++23dziYds2aNeG6OxpbM3/+fJOVlRW+HRpM+53vfMf8+9//Nq+99prJy8szd9xxxzFeUcB6od/vL3+FZuU1NTWZu+66y/Tv398kJyebgoIC881vftN8+umn4cfYvXu3mT59usnIyDB5eXnm2muvZdYP0F3t2bPHzJw50/Tr18+43W7Tp08fM2XKFPPuu+8aY058enJbHQUVv99vCgoKjCSzbdu2I+p44403zDnnnGNSU1ON1+s148ePN08//XR4f0dBxRhjfvnLX5r8/HzjcDjC/yMMBAJm7ty5ZtCgQSY5Odn07t3bXHzxxea9994L3+8f//iHGTBggPF4POa8884zf/rTn44ID36/38ybN8+MGzfOpKWlGa/Xa8aMGWMee+wxU19fHz7mnnvuMX369DHJyclHnZ7claAydepUc9ddd5mcnByTkZFhbrzxRtPY2HjEzwBAxxzGnMBoMwBAp1177bWqrKzs0vLjAIIYowIAAGyLoAIAAGyLrh8AAGBbtKgAAADbIqgAAADbIqgAAADbIqgAAADbIqgAAADbIqgAAADbIqgAAADbIqgAAADbIqgAAADb+n+HSSRD8eUnhAAAAABJRU5ErkJggg=="
          },
          "metadata": {}
        }
      ],
      "execution_count": 8
    },
    {
      "cell_type": "markdown",
      "source": "What is the median of the column `ConvertedComp`?\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nmedian_value=df['ConvertedComp'].median()\nprint(median_value)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "57745.0\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 9
    },
    {
      "cell_type": "markdown",
      "source": "How many responders identified themselves only as a **Man**?\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nprint(df['Gender'].tolist().count(\"Man\"))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "10480\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 10
    },
    {
      "cell_type": "markdown",
      "source": "Find out the  median ConvertedComp of responders identified themselves only as a **Woman**?\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nimport numpy as np",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 13
    },
    {
      "cell_type": "code",
      "source": "df['ConvertedComp'].isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 15,
          "output_type": "execute_result",
          "data": {
            "text/plain": "816"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15
    },
    {
      "cell_type": "code",
      "source": "df['ConvertedComp'].replace(np.nan,(median_value),inplace=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-17-48f919177915>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df['ConvertedComp'].replace(np.nan,(median_value),inplace=True)\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 17
    },
    {
      "cell_type": "code",
      "source": "df['ConvertedComp'].isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 18,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 18
    },
    {
      "cell_type": "code",
      "source": "W_median_value=df.groupby(['Gender'])['ConvertedComp'].median()\nprint (W_median_value)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Gender\nMan                                                            57745.0\nMan;Non-binary, genderqueer, or gender non-conforming          59520.0\nNon-binary, genderqueer, or gender non-conforming              66000.0\nWoman                                                          57745.0\nWoman;Man                                                      25887.0\nWoman;Man;Non-binary, genderqueer, or gender non-conforming    30244.0\nWoman;Non-binary, genderqueer, or gender non-conforming        65535.5\nName: ConvertedComp, dtype: float64\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 21
    },
    {
      "cell_type": "markdown",
      "source": "Give the five number summary for the column `Age`?\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "**Double click here for hint**.\n\n<!--\nmin,q1,median,q3,max of a column are its five number summary.\n-->\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\ndf['Age'].describe()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": "count    11111.000000\nmean        30.778895\nstd          7.393686\nmin         16.000000\n25%         25.000000\n50%         29.000000\n75%         35.000000\nmax         99.000000\nName: Age, dtype: float64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 24
    },
    {
      "cell_type": "markdown",
      "source": "Plot a histogram of the column `Age`.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nsns.distplot(df['Age'],hist=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-25-24d9cd35b048>:2: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(df['Age'],hist=True)\n",
          "output_type": "stream"
        },
        {
          "execution_count": 25,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='Age', ylabel='Density'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 25
    },
    {
      "cell_type": "markdown",
      "source": "## Outliers\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Finding outliers\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Find out if outliers exist in the column `ConvertedComp` using a box plot?\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\ndf.boxplot(column=['ConvertedComp'],grid=False)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 28,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 28
    },
    {
      "cell_type": "markdown",
      "source": "Find out the Inter Quartile Range for the column `ConvertedComp`.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nq1=df['ConvertedComp'].quantile(0.25)\nq3=df['ConvertedComp'].quantile(0.75)\nIQR=q3-q1\nIQR",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 30,
          "output_type": "execute_result",
          "data": {
            "text/plain": "65984.0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 30
    },
    {
      "cell_type": "markdown",
      "source": "Find out the upper and lower bounds.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nlow_lim=q1-1.5*IQR\nup_lim=q3+1.5*IQR\nprint('low_limit is',low_lim)\nprint('up_limit is',up_lim)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "low_limit is -69960.0\nup_limit is 193976.0\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 32
    },
    {
      "cell_type": "markdown",
      "source": "Identify how many outliers are there in the `ConvertedComp` column.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\nprint(((df['ConvertedComp']<(low_lim))/df['ConvertedComp']>(up_lim)).sum())",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "0\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 34
    },
    {
      "cell_type": "markdown",
      "source": "Create a new dataframe by removing the outliers from the `ConvertedComp` column.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\ndf1=df[(df['ConvertedComp']>(q1-1.5*IQR))&(df['ConvertedComp']<(q3+1.5*IQR))]",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 36
    },
    {
      "cell_type": "markdown",
      "source": "## Correlation\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Finding correlation\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Find the correlation between `Age` and all other numerical columns.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# your code goes here\ndf2=df.select_dtypes(include=['int64','float64'])\ndf2.corr()['Age']",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 41,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Respondent       0.004041\nCompTotal        0.006970\nConvertedComp    0.103232\nWorkWeekHrs      0.036518\nCodeRevHrs      -0.020469\nAge              1.000000\nName: Age, dtype: float64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 41
    },
    {
      "cell_type": "markdown",
      "source": "## Authors\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Ramesh Sannareddy\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Other Contributors\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Rav Ahuja\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": " Copyright © 2020 IBM Corporation. This notebook and its source code are released under the terms of the [MIT License](https://cognitiveclass.ai/mit-license?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBM-DA0321EN-SkillsNetwork-21426264&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBM-DA0321EN-SkillsNetwork-21426264&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBM-DA0321EN-SkillsNetwork-21426264&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ&cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBM-DA0321EN-SkillsNetwork-21426264&cm_mmca1=000026UJ&cm_mmca2=10006555&cm_mmca3=M12345678&cvosrc=email.Newsletter.M12345678&cvo_campaign=000026UJ).\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<!--## Change Log\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<!--| Date (YYYY-MM-DD) | Version | Changed By        | Change Description                 |\n| ----------------- | ------- | ----------------- | ---------------------------------- |\n| 2020-10-17        | 0.1     | Ramesh Sannareddy | Created initial version of the lab |--!>\n",
      "metadata": {}
    }
  ]
}